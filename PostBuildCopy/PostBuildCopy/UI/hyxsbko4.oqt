using PostBuildCopy.Classes;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;

namespace PostBuildCopy.UI
{
    /// <summary>
    /// Interaction logic for PathTreeView.xaml
    /// </summary>
    public partial class PathTreeView : UserControl
    {
        ObservableCollection<PathTreeNodeData> root = new ObservableCollection<PathTreeNodeData>();

        // On delegate Get Node Children
        public delegate void GetChildrenDelegate(PathTreeNodeData Node);
        public GetChildrenDelegate GetChildren;

        // On Node Drop
        public delegate void HandleOnNodeDrop(PathTreeNodeData nodeSource, PathTreeNodeData nodeTarget);
        public event HandleOnNodeDrop OnNodeDrop;

        // On Path Create
        public delegate void HandleOnPathCreate(PathTreeNodeData iNode, string iPath);
        public event HandleOnPathCreate OnPathCreate;

        // constructor
        public PathTreeView()
        {

            InitializeComponent();

            root.Add(TreeModel.GetTreeNodeData());
            treeView.ItemsSource = root;
        }

        private void TreeExpanded(object sender, RoutedEventArgs e)
        {
            // Get the PathTreeNodeData object from node that expanded
            // With each child, call delegate GetChildren
            TreeViewItem item = e.OriginalSource as TreeViewItem;
            PathTreeNodeData data = (PathTreeNodeData)item.Header;
            if (null != GetChildren)
            {
                for (int i = 0; i < data.Children.Count; ++i)
                {
                    GetChildren(data.Children[i]);
                }
            }
        }


        private void TreeMouseMove(object sender, MouseEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                PathTreeNodeData data = (PathTreeNodeData)treeView.SelectedItem;
                if (null != data)
                {
                    DragDrop.DoDragDrop(treeView, data, DragDropEffects.Copy);
                }
            }
        }


        private void TreeDrop(object sender, DragEventArgs e)
        {
            e.Effects = DragDropEffects.None;
            e.Handled = true;
            TreeViewItem container = GetNearestContainer(e.OriginalSource as UIElement);
            if (container != null)
            {
                PathTreeNodeData sourceDrap = (PathTreeNodeData)e.Data.GetData(typeof(PathTreeNodeData));
                PathTreeNodeData tagetDrop = (PathTreeNodeData)container.Header;
                if (null != OnNodeDrop)
                    OnNodeDrop(sourceDrap, tagetDrop);
            }
        }

        // Walk up the element tree to the nearest tree view item.
        private TreeViewItem GetNearestContainer(UIElement element)
        {
            TreeViewItem container = element as TreeViewItem;
            while ((container == null) && (element != null))
            {
                element = VisualTreeHelper.GetParent(element) as UIElement;
                container = element as TreeViewItem;
            }
            return container;
        }

        private void MouseRight(object sender, MouseButtonEventArgs e)
        {
            e.Handled = true;
            TreeViewItem item = e.Source as TreeViewItem;
            if (null != item)
                item.IsSelected = true;
        }

        private void NewItem(object sender, RoutedEventArgs e)
        {
            TreeViewItem item = (TreeViewItem)treeView.SelectedItem;
            //TreeViewItem item = e.Source as TreeViewItem;
            //if (null != OnPathCreate)
            //    OnPathCreate();
        }

        private void DeleteItem(object sender, RoutedEventArgs e)
        {

        }


    }
}
